name: Snyk

on:
  workflow_call:
    inputs:
      # valid options: python, dotnet, golang, nodejs and docker
      language-tooling:
        description: "Programming language or building tool used"
        required: false
        type: string
        default: dotnet
      image_tag:
        description: "Container image tag"
        required: false
        type: string
        default: latest
      target-csproject-files:
        # This files should processed as a comma separated array
        description: "Target dotnet csproject files"
        required: false
        type: string
        default: ""
      target-directory:
        description: "Target working directory"
        required: false
        type: string
        default: "."

jobs:
  snyk-scan:
    name: snyk scan
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: ${{ inputs.image_tag }}
      REGISTRY_NAME: "ghcr.io"
      SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.target-directory }}

    steps:
      # Checkout repository
      - name: checkout repository
        id: checkout
        uses: actions/checkout@v3

      - name: Install dotnet dependencies
        if: ${{ inputs.language-tooling == 'dotnet'}}
        run: |
          input=$(echo "Nmbrs.Payment.Service.Api/Nmbrs.Payment.Service.Api.csproj, Nmbrs.Payment.Service.Client.Tests/Nmbrs.Payment.Service.Client.Tests.csproj, Nmbrs.Payment.Service.Tests.Integration/Nmbrs.Payment.Service.Tests.Integration.csproj" | tr ', ' ' ')
          array=($input)
          for value in ${array[@]};
          do
            dotnet restore ${value}
          done
      
      # Scan for dotnet
      - name: Run Snyk scan for .Net
        id: snyk-dotnet
        if: ${{ inputs.language-tooling == 'dotnet'}}
        uses: snyk/actions/dotnet@master
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          args:  --all-projects --sarif-file-output=snyk.sarif
          # args:  --all-projects --sarif-file-output=snyk.sarif

      # Scan for nodejs
      - name: Run Snyk scan for nodejs
        id: snyk-nodejs
        if: ${{ inputs.language-tooling == 'nodejs'}}
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          args: --sarif-file-output=snyk.sarif

      # Scan for golang
      - name: Run Snyk scan for golang
        id: snyk-golang
        if: ${{ inputs.language-tooling == 'golang'}}
        uses: snyk/actions/golang@master
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          args: --sarif-file-output=snyk.sarif

      # Scan for python
      - name: Run Snyk scan for python
        id: snyk-python
        if: ${{ inputs.language-tooling == 'python'}}
        uses: snyk/actions/python@master
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          args: --sarif-file-output=snyk.sarif

      # Scan for docker
      - name: Login to container registry
        id: registry-login
        if: ${{ inputs.language-tooling == 'docker'}}
        uses: docker/login-action@v2
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker image pull
        id: image-pull
        if: ${{ inputs.language-tooling == 'docker'}}
        run: docker image pull ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Run Snyk scan for docker
        id: snyk-docker
        if: ${{ inputs.language-tooling == 'docker'}}
        uses: snyk/actions/docker@master
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          image: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile --sarif-file-output=snyk.sarif

      # Uploads SARIF file to see the result of tfsec in github repository
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     image: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      #     sarif_file: snyk.sarif
