name: microservice golang template

on:
  workflow_dispatch:
# on:
#   push:

#   pull_request:
#     types: [opened, synchronize, reopened]
#     branches: [main]

jobs:
  snyk:
    # on pull request events only.
    # if: github.event_name == 'pull_request'
    name: Scan Code Vulnerabilities
    uses: Nmbrs/reusable-workflows/.github/workflows/snyk-code-scan.workflow.yaml@demo-sec
    with:
      language-tooling: golang
    secrets:
      snyk_api_token: ${{ secrets.SNYK_API_TOKEN }}
  
  polaris:
    # triggered when opening a pull request or on merging.    
    # if: (github.event_name == 'pull_request' && github.event_type == 'opened') || github.ref_name == 'main'
    # if: github.event_name == 'pull_request'
    name: Scan for Security Vulnerabilities
    uses: Nmbrs/reusable-workflows/.github/workflows/polaris-scan.workflow.yaml@demo-sec
    with:
      polaris_project_name: 'my-project-name'
      polaris_server_url: 'https://my-polaris-url.com'
    secrets:
      polaris_access_token: ${{ secrets.POLARIS_API_TOKEN }}

  gitleaks:
    # triggered on every commit, on any branch.
    # if: github.event_name == 'push'
    name: Scan Code for Leaks
    uses: Nmbrs/reusable-workflows/.github/workflows/gitleaks-repository-scan.workflow.yaml@demo-sec
  
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.0'

      - name: Install Dependencies
        run: |
            go version
            go get -u golang.org/x/lint/golint

      - name: Run build
        run: go build .

      - name: Run vet & lint
        run: |
          go vet .
          go lint .

      - name: Run testing
        run: cd test && go test -v
  
  build-and-push-image:
    runs-on: ubuntu-latest
  
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}